# vim: set ft=vim :

lua_shared_dict mimes 1m;
init_by_lua_block {
    ngx.shared.mimes:set("lmth", "text/html")
    ngx.shared.mimes:set("gvs", "image/svg+xml")
    ngx.shared.mimes:set("sj", "application/x-javascript")
    ngx.shared.mimes:set("ssc", "text/css")
    ngx.shared.mimes:set("lmx", "text/xml")
}

server {
    listen 8000 default_server;
    listen [::]:8000 default_server;

    root /var/www/html;

    server_name _;

    set $index_br index.html;
    set $is_br off;

    set_by_lua_block $uri_br {
        local ae = ngx.req.get_headers()["Accept-Encoding"]
        if (ae ~= nil and string.find(ae, "br")) then
            ngx.var.index_br = "index.html.br"
            ngx.var.is_br = "on"
            return ngx.var.uri .. ".br"
        else
            return ngx.var.uri
        end
    }

    # gzip stuff
    gzip_static  on;
    gzip_types image/svg+xml text/css application/javascript application/json;

    location / {
        # First attempt to serve request as file, then
        # as directory, then fall back to displaying a 404.
        index $index_br index.html;
        default_type text/html;
        try_files $uri_br $uri $uri/ =404;

        if ($is_br = off) {
            gzip on;
        }
        rewrite_by_lua_block {
            if (ngx.var.is_br == "on") then
                ngx.header.content_encoding = "br"
                r = string.reverse(ngx.var.uri)
                s, e = string.find(r, "%.")
                if (s == nil) then
                    ngx.header.content_type = "text/html"
                else
                    ngx.header.content_type = ngx.shared.mimes:get(string.sub(r, 1, s-1))
                end
            end
        }
    }

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #	deny all;
    #}
}


